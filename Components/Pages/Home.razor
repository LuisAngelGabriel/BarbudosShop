@page "/"
@using BarbudosShop.Services
@using BarbudosShop.Models
@using Blazored.Toast.Services
@rendermode InteractiveServer
@inject ProductoService ProductoService
@inject NavigationManager NavigationManager
@inject CarritoService CarritoService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Barbudos Shop</PageTitle>

<div class="container-fluid p-0">
    <div class="bg-dark text-white text-center py-5">
        <h1 class="fw-bold">Tu look perfecto, al alcance de un clic.</h1>
        <p class="lead">Tu estilo, tu poder. Todo para el hombre que cuida su imagen.</p>
    </div>

    <div class="text-center my-4">
        <h2 class="fw-bold text-primary">Listado Productos</h2>
        <hr class="mx-auto" style="width: 150px; border-top: 3px solid #0d6efd;">
    </div>

    @if (isLoading)
    {
        <div class="text-center mt-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando productos...</span>
            </div>
            <p class="mt-2">Cargando productos...</p>
        </div>
    }
    else if (productos != null && productos.Count > 0)
    {
        <!-- Barra de búsqueda y filtro -->
        <div class="container mb-4">
            <div class="row justify-content-center">
                <div class="col-lg-3 col-md-4 mb-2">
                    <select class="form-select" @bind="Filtro">
                        <option value="">Filtrar por...</option>
                        <option value="Nombre">Nombre</option>
                        <option value="Marca">Marca</option>
                        <option value="Categoria">Categoría</option>
                    </select>
                </div>
                <div class="col-lg-5 col-md-6 mb-2">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" placeholder="Buscar..."
                               @bind-value="ValorFiltro" @bind-value:event="oninput" />
                    </div>
                </div>
                <div class="col-lg-2 col-md-2 mb-2">
                    <button class="btn btn-primary w-100" @onclick="Buscar">
                        <i class="bi bi-search"></i> Buscar
                    </button>
                </div>
            </div>
        </div>

        @if (productosFiltrados != null && productosFiltrados.Count > 0)
        {
            <div class="row p-4">
                @foreach (var producto in productosFiltrados)
                {
                    <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                        <div class="card h-100 shadow-sm">
                            @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                            {
                                <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" style="height: 200px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                    <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                                </div>
                            }

                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@producto.Nombre</h5>
                                <p class="card-text text-muted small">@producto.Marca</p>

                                @if (!string.IsNullOrEmpty(producto.Descripcion))
                                {
                                    <p class="card-text">@producto.Descripcion</p>
                                }

                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h4 class="text-success mb-0">RD$ @producto.Precio.ToString("N2")</h4>
                                        <small class="text-muted">Stock: @producto.Cantidad</small>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <span class="badge bg-secondary">@producto.Categoria?.Nombre</span>
                                        @if (producto.Disponible && producto.Cantidad > 0)
                                        {
                                            <span class="badge bg-success">Disponible</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Agotado</span>
                                        }
                                    </div>

                                    @if (producto.Disponible && producto.Cantidad > 0)
                                    {
                                        <button class="btn btn-primary w-100" @onclick="() => AgregarAlCarrito(producto)">Añadir al carrito</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary w-100" disabled>Agotado</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-warning text-center mx-4" role="alert">
                No se encontraron productos que coincidan con la búsqueda.
            </div>
        }

        <div class="d-flex justify-content-center my-5">
            <a href="/sugerencias/crear" class="btn btn-info btn-lg">
                <i class="bi bi-chat-left-text-fill me-2"></i> Envía tu Sugerencia
            </a>
        </div>
    }
    else
    {
        <div class="text-center mt-5">
            <div class="alert alert-info" role="alert">
                <h4 class="alert-heading">¡Próximamente!</h4>
                <p>Estamos preparando nuestro catálogo de productos. Vuelve pronto para descubrir las novedades.</p>
                <hr>
                <p class="mb-0">Mientras tanto, puedes contactarnos para más información.</p>
            </div>
        </div>
    }
</div>

@code {
    private List<Producto>? productos;
    private List<Producto>? productosFiltrados;
    private bool isLoading = true;
    private string Filtro { get; set; } = "";
    private string ValorFiltro { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await ProductoService.GetProductosAsync();
            productosFiltrados = productos;
        }
        catch
        {
            productos = new List<Producto>();
            productosFiltrados = productos;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Buscar()
    {
        if (string.IsNullOrWhiteSpace(ValorFiltro))
        {
            productosFiltrados = productos;
            return;
        }

        ValorFiltro = ValorFiltro.ToLower();

        productosFiltrados = productos?
            .Where(p =>
                (Filtro == "Nombre" && p.Nombre != null && p.Nombre.ToLower().Contains(ValorFiltro)) ||
                (Filtro == "Marca" && p.Marca != null && p.Marca.ToLower().Contains(ValorFiltro)) ||
                (Filtro == "Categoria" && p.Categoria != null && p.Categoria.Nombre.ToLower().Contains(ValorFiltro)) ||
                (string.IsNullOrWhiteSpace(Filtro) && (
                    (p.Nombre != null && p.Nombre.ToLower().Contains(ValorFiltro)) ||
                    (p.Marca != null && p.Marca.ToLower().Contains(ValorFiltro)) ||
                    (p.Descripcion != null && p.Descripcion.ToLower().Contains(ValorFiltro))
                ))
            )
            .ToList();
    }

    private async Task AgregarAlCarrito(Producto producto)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            ToastService.ShowWarning("Debes iniciar sesión para agregar productos al carrito.");
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        var idUsuario = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (idUsuario != null)
        {
            var item = new ItemCarrito
            {
                IdUsuario = idUsuario,
                IdProducto = producto.IdProducto
            };

            var agregado = await CarritoService.Agregar(item);

            if (agregado)
            {
                ToastService.ShowSuccess("Producto agregado al carrito.");
            }
            else
            {
                ToastService.ShowError("Error al agregar el producto al carrito.");
            }
        }
    }
}