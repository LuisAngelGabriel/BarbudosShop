@page "/carrito"
@using BarbudosShop.Models
@using BarbudosShop.Services
@using Blazored.Toast.Services
@rendermode InteractiveServer
@inject CarritoService CarritoService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IToastService toastService

<PageTitle>Carrito de Compras</PageTitle>

<div class="container py-4">
    <h2 class="mb-4 text-center">Tu Carrito</h2>

    @if (isLoading)
    {
        <p class="text-center">Cargando carrito...</p>
    }
    else if (items == null || items.Count == 0)
    {
        <div class="alert alert-info text-center">
            Tu carrito está vacío.
        </div>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Marca</th>
                    <th>Cantidad</th>
                    <th>Precio Unitario</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr>
                        <td>@item.Producto?.Nombre</td>
                        <td>@item.Producto?.Marca</td>
                        <td>
                            <div class="d-flex align-items-center">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ActualizarCantidad(item.Id, item.Cantidad - 1)">-</button>
                                <span class="mx-2">@item.Cantidad</span>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ActualizarCantidad(item.Id, item.Cantidad + 1)">+</button>
                            </div>
                        </td>
                        <td>@((item.Producto?.Precio ?? 0).ToString("C"))</td>
                        <td>@((item.Cantidad * (item.Producto?.Precio ?? 0)).ToString("C"))</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarItem(item.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-end align-items-center mt-4">
            <h4 class="me-3">Total del carrito: @totalCarrito.ToString("C")</h4>
            <button class="btn btn-warning me-2" @onclick="VaciarCarrito">Vaciar Carrito</button>
            <button class="btn btn-success" @onclick="Pagar">Ir a Pagar</button>
        </div>
    }
</div>

@code {
    private List<ItemCarrito>? items;
    private bool isLoading = true;
    private string? idUsuario;
    private decimal totalCarrito = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        idUsuario = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(idUsuario))
        {
            NavigationManager.NavigateTo("/Account/Login");
            return;
        }

        await CargarCarrito();
    }

    private async Task CargarCarrito()
    {
        isLoading = true;
        items = await CarritoService.ListarPorUsuario(idUsuario!);
        totalCarrito = items.Sum(item => item.Cantidad * (item.Producto?.Precio ?? 0));
        isLoading = false;
        StateHasChanged();
    }

    private async Task EliminarItem(int id)
    {
        var itemEliminado = await CarritoService.Eliminar(id);
        if (itemEliminado)
        {
            toastService.ShowSuccess("Producto eliminado del carrito.");
        }
        await CargarCarrito();
    }

    private async Task VaciarCarrito()
    {
        var carritoVacio = await CarritoService.Vaciar(idUsuario!);
        if (carritoVacio)
        {
            toastService.ShowInfo("El carrito ha sido vaciado.");
        }
        await CargarCarrito();
    }
    
    private async Task ActualizarCantidad(int id, int nuevaCantidad)
    {
        if (nuevaCantidad > 0)
        {
            var item = items!.FirstOrDefault(i => i.Id == id);
            if (item != null && item.Producto != null && nuevaCantidad > item.Producto.Cantidad)
            {
                toastService.ShowWarning("No hay suficiente stock disponible para este producto.");
            }
            else
            {
                await CarritoService.ActualizarCantidad(id, nuevaCantidad);
            }
        }
        else
        {
            await EliminarItem(id);
        }
        await CargarCarrito();
    }

    private async Task Pagar()
    {
        NavigationManager.NavigateTo("/pago");

    }
}