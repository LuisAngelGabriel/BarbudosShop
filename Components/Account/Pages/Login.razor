@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BarbudosShop.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-lg border-0 rounded-lg mt-5">
                <div class="card-header bg-dark text-white text-center py-4">
                    <h3 class="fw-bold my-0">Iniciar Sesión</h3>
                </div>
                <div class="card-body p-4">
                    <h5 class="text-center mb-4 text-muted">Inicia Sesión en tu Cuenta</h5>

                    <EditForm Model="Input" OnValidSubmit="IniciarSesionUsuario" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger text-center mb-3" role="alert" />
                        <StatusMessage Message="@errorMessage" />

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control rounded-pill" autocomplete="username" aria-required="true" placeholder="nombre@ejemplo.com" />
                            <label for="Input.Email"><i class="bi bi-envelope-fill me-2"></i>Correo Electrónico</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Contrasena" id="Input.Contrasena" class="form-control rounded-pill" autocomplete="current-password" aria-required="true" placeholder="contraseña" />
                            <label for="Input.Contrasena"><i class="bi bi-lock-fill me-2"></i>Contraseña</label>
                            <ValidationMessage For="() => Input.Contrasena" class="text-danger" />
                        </div>
                        <div class="form-check mb-3">
                            <InputCheckbox @bind-Value="Input.Recordarme" id="Input.Recordarme" class="form-check-input" />
                            <label class="form-check-label" for="Input.Recordarme">
                                Recuérdame
                            </label>
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-dark btn-lg rounded-pill">Iniciar Sesión</button>
                        </div>
                        <div class="text-center mt-3">
                            <p>
                                <NavLink href="Account/ForgotPassword">¿Olvidaste tu contraseña?</NavLink>
                            </p>
                            <p>
                                <NavLink href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registrar una nueva cuenta</NavLink>
                            </p>
                        
                        </div>
                    </EditForm>

                    <hr class="my-4" />

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task IniciarSesionUsuario()
    {
        var resultado = await SignInManager.PasswordSignInAsync(Input.Email, Input.Contrasena, Input.Recordarme, lockoutOnFailure: false);
        if (resultado.Succeeded)
        {
            Logger.LogInformation("Usuario ha iniciado sesión.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (resultado.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.Recordarme });
        }
        else if (resultado.IsLockedOut)
        {
            Logger.LogWarning("Cuenta de usuario bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El correo electrónico es obligatorio.")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico no válido.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria.")]
        [DataType(DataType.Password)]
        public string Contrasena { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool Recordarme { get; set; }
    }
}